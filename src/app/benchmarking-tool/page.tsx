"use client";

import { useState } from "react";
import Link from "next/link";
import { ChevronRight, Info, Download, BarChart2, ArrowRight, CheckCircle, AlertCircle, ChevronDown, ChevronUp } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Slider } from "@/components/ui/slider";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";
import { HoverCard, HoverCardContent, HoverCardTrigger } from "@/components/ui/hover-card";
import BenchmarkingPdfExport from "@/components/benchmarking-pdf-export";

type MetricCategory = 'financial' | 'operational' | 'clinical' | 'satisfaction';

interface FacilitySpecificBenchmarks {
  poor: number;
  average: number;
  good: number;
  excellent: number;
}

interface Metric {
  id: string;
  name: string;
  description: string;
  category: MetricCategory;
  unit: string;
  benchmarks: {
    poor: number;
    average: number;
    good: number;
    excellent: number;
  };
  facilitySpecificBenchmarks?: {
    residential?: FacilitySpecificBenchmarks;
    detox?: FacilitySpecificBenchmarks;
    'php-iop'?: FacilitySpecificBenchmarks;
    outpatient?: FacilitySpecificBenchmarks;
    specialty?: FacilitySpecificBenchmarks;
  };
  valueType: 'percentage' | 'currency' | 'number' | 'days';
}

const METRICS: Metric[] = [
  // Financial Metrics
  {
    id: 'avg_daily_rate',
    name: 'Average Daily Rate',
    description: 'The average revenue generated per occupied bed per day',
    category: 'financial',
    unit: '$',
    benchmarks: {
      poor: 500,
      average: 800,
      good: 1000,
      excellent: 1200
    },
    facilitySpecificBenchmarks: {
      residential: {
        poor: 650,
        average: 950,
        good: 1200,
        excellent: 1500
      },
      detox: {
        poor: 750,
        average: 1100,
        good: 1400,
        excellent: 1800
      },
      'php-iop': {
        poor: 350,
        average: 500,
        good: 650,
        excellent: 800
      },
      outpatient: {
        poor: 200,
        average: 300,
        good: 400,
        excellent: 500
      },
      specialty: {
        poor: 800,
        average: 1200,
        good: 1500,
        excellent: 2000
      }
    },
    valueType: 'currency'
  },
  {
    id: 'occupancy_rate',
    name: 'Occupancy Rate',
    description: 'Percentage of available beds that are occupied',
    category: 'financial',
    unit: '%',
    benchmarks: {
      poor: 60,
      average: 75,
      good: 85,
      excellent: 90
    },
    facilitySpecificBenchmarks: {
      residential: {
        poor: 65,
        average: 80,
        good: 88,
        excellent: 93
      },
      detox: {
        poor: 70,
        average: 85,
        good: 90,
        excellent: 95
      },
      'php-iop': {
        poor: 55,
        average: 70,
        good: 80,
        excellent: 85
      },
      outpatient: {
        poor: 50,
        average: 65,
        good: 75,
        excellent: 80
      }
    },
    valueType: 'percentage'
  },
  {
    id: 'rev_per_available_bed',
    name: 'Revenue Per Available Bed',
    description: 'Average revenue generated by each available bed (ADR Ã— Occupancy)',
    category: 'financial',
    unit: '$',
    benchmarks: {
      poor: 300,
      average: 600,
      good: 850,
      excellent: 1080
    },
    valueType: 'currency'
  },
  {
    id: 'gross_margin',
    name: 'Gross Margin',
    description: 'Gross profit as a percentage of revenue',
    category: 'financial',
    unit: '%',
    benchmarks: {
      poor: 20,
      average: 35,
      good: 45,
      excellent: 55
    },
    valueType: 'percentage'
  },
  {
    id: 'denial_rate',
    name: 'Claim Denial Rate',
    description: 'Percentage of claims denied by insurance companies',
    category: 'financial',
    unit: '%',
    benchmarks: {
      poor: 15,
      average: 10,
      good: 5,
      excellent: 2
    },
    valueType: 'percentage'
  },

  // Operational Metrics
  {
    id: 'avg_los',
    name: 'Average Length of Stay',
    description: 'Average number of days a patient stays in treatment',
    category: 'operational',
    unit: 'days',
    benchmarks: {
      poor: 15,
      average: 22,
      good: 28,
      excellent: 35
    },
    valueType: 'days'
  },
  {
    id: 'staff_to_patient_ratio',
    name: 'Staff-to-Patient Ratio',
    description: 'Number of clinical staff per patient',
    category: 'operational',
    unit: 'ratio',
    benchmarks: {
      poor: 0.2,
      average: 0.25,
      good: 0.33,
      excellent: 0.4
    },
    valueType: 'number'
  },
  {
    id: 'staff_turnover',
    name: 'Staff Turnover Rate',
    description: 'Percentage of staff that leave annually',
    category: 'operational',
    unit: '%',
    benchmarks: {
      poor: 45,
      average: 35,
      good: 25,
      excellent: 15
    },
    valueType: 'percentage'
  },
  {
    id: 'admission_conversion',
    name: 'Admission Conversion Rate',
    description: 'Percentage of inquiries that convert to admissions',
    category: 'operational',
    unit: '%',
    benchmarks: {
      poor: 15,
      average: 25,
      good: 35,
      excellent: 45
    },
    valueType: 'percentage'
  },
  {
    id: 'utilization_review_success',
    name: 'Utilization Review Success Rate',
    description: 'Percentage of utilization review requests approved',
    category: 'operational',
    unit: '%',
    benchmarks: {
      poor: 70,
      average: 80,
      good: 90,
      excellent: 95
    },
    valueType: 'percentage'
  },

  // Clinical Metrics
  {
    id: 'completion_rate',
    name: 'Treatment Completion Rate',
    description: 'Percentage of patients who complete the full treatment program',
    category: 'clinical',
    unit: '%',
    benchmarks: {
      poor: 55,
      average: 65,
      good: 75,
      excellent: 85
    },
    facilitySpecificBenchmarks: {
      residential: {
        poor: 60,
        average: 70,
        good: 80,
        excellent: 90
      },
      detox: {
        poor: 65,
        average: 75,
        good: 85,
        excellent: 92
      },
      'php-iop': {
        poor: 50,
        average: 60,
        good: 70,
        excellent: 80
      },
      outpatient: {
        poor: 45,
        average: 55,
        good: 65,
        excellent: 75
      }
    },
    valueType: 'percentage'
  },
  {
    id: 'readmission_rate',
    name: 'Readmission Rate (30-day)',
    description: 'Percentage of patients readmitted within 30 days of discharge',
    category: 'clinical',
    unit: '%',
    benchmarks: {
      poor: 25,
      average: 20,
      good: 15,
      excellent: 10
    },
    valueType: 'percentage'
  },
  {
    id: 'assessment_completion',
    name: 'Assessment Completion Rate',
    description: 'Percentage of patients with complete clinical assessments',
    category: 'clinical',
    unit: '%',
    benchmarks: {
      poor: 70,
      average: 80,
      good: 90,
      excellent: 98
    },
    valueType: 'percentage'
  },
  {
    id: 'treatment_plan_adherence',
    name: 'Treatment Plan Adherence',
    description: 'Percentage of treatment plans followed as prescribed',
    category: 'clinical',
    unit: '%',
    benchmarks: {
      poor: 65,
      average: 75,
      good: 85,
      excellent: 95
    },
    valueType: 'percentage'
  },

  // Satisfaction Metrics
  {
    id: 'patient_satisfaction',
    name: 'Patient Satisfaction Score',
    description: 'Average satisfaction score from patient surveys (0-100)',
    category: 'satisfaction',
    unit: 'score',
    benchmarks: {
      poor: 70,
      average: 80,
      good: 90,
      excellent: 95
    },
    valueType: 'number'
  },
  {
    id: 'family_satisfaction',
    name: 'Family Satisfaction Score',
    description: 'Average satisfaction score from family surveys (0-100)',
    category: 'satisfaction',
    unit: 'score',
    benchmarks: {
      poor: 65,
      average: 75,
      good: 85,
      excellent: 95
    },
    valueType: 'number'
  },
  {
    id: 'nps',
    name: 'Net Promoter Score',
    description: 'Measure of how likely patients are to recommend your facility',
    category: 'satisfaction',
    unit: 'score',
    benchmarks: {
      poor: 20,
      average: 40,
      good: 60,
      excellent: 75
    },
    valueType: 'number'
  }
];

export default function BenchmarkingToolPage() {
  const [facilityType, setFacilityType] = useState<string>("");
  const [activeTab, setActiveTab] = useState<MetricCategory>('financial');
  const [metricValues, setMetricValues] = useState<Record<string, number>>({});
  const [showResults, setShowResults] = useState<boolean>(false);
  const [expandedSections, setExpandedSections] = useState<Record<string, boolean>>({
    financial: true,
    operational: true,
    clinical: true,
    satisfaction: true
  });

  // Add state for recommendations
  const [categoryRecommendations, setCategoryRecommendations] = useState<Record<MetricCategory, string[]>>({
    financial: [],
    operational: [],
    clinical: [],
    satisfaction: []
  });

  // Categories for display
  const categories = [
    { id: 'financial', name: 'Financial', icon: <BarChart2 className="h-4 w-4" /> },
    { id: 'operational', name: 'Operations', icon: <BarChart2 className="h-4 w-4" /> },
    { id: 'clinical', name: 'Clinical', icon: <BarChart2 className="h-4 w-4" /> },
    { id: 'satisfaction', name: 'Satisfaction', icon: <BarChart2 className="h-4 w-4" /> }
  ];

  // Handle input change
  const handleMetricChange = (metricId: string, value: number) => {
    setMetricValues(prev => ({
      ...prev,
      [metricId]: value
    }));
  };

  // Format value based on type
  const formatValue = (value: number, type: string) => {
    if (!value && value !== 0) return 'N/A';

    switch (type) {
      case 'currency':
        return `$${value.toLocaleString()}`;
      case 'percentage':
        return `${value}%`;
      case 'days':
        return `${value} days`;
      default:
        return value.toString();
    }
  };

  // Get facility-specific benchmarks for a metric and facility type
  const getFacilitySpecificBenchmarks = (metric: Metric, facilityType: string) => {
    if (
      facilityType &&
      metric.facilitySpecificBenchmarks &&
      metric.facilitySpecificBenchmarks[facilityType as keyof typeof metric.facilitySpecificBenchmarks]
    ) {
      return metric.facilitySpecificBenchmarks[facilityType as keyof typeof metric.facilitySpecificBenchmarks]!;
    }
    return metric.benchmarks;
  };

  // Get rating class based on benchmark comparison
  const getRatingClass = (metric: Metric, value: number) => {
    if (!value && value !== 0) return '';

    const benchmarks = getFacilitySpecificBenchmarks(metric, facilityType);

    if (metric.id === 'denial_rate' || metric.id === 'staff_turnover' || metric.id === 'readmission_rate') {
      // For these metrics, lower is better
      if (value <= benchmarks.excellent) return 'text-green-500';
      if (value <= benchmarks.good) return 'text-blue-500';
      if (value <= benchmarks.average) return 'text-yellow-500';
      return 'text-red-500';
    } else {
      // For most metrics, higher is better
      if (value >= benchmarks.excellent) return 'text-green-500';
      if (value >= benchmarks.good) return 'text-blue-500';
      if (value >= benchmarks.average) return 'text-yellow-500';
      return 'text-red-500';
    }
  };

  // Get rating label
  const getRatingLabel = (metric: Metric, value: number) => {
    if (!value && value !== 0) return 'Not Set';

    const benchmarks = getFacilitySpecificBenchmarks(metric, facilityType);

    if (metric.id === 'denial_rate' || metric.id === 'staff_turnover' || metric.id === 'readmission_rate') {
      // For these metrics, lower is better
      if (value <= benchmarks.excellent) return 'Excellent';
      if (value <= benchmarks.good) return 'Good';
      if (value <= benchmarks.average) return 'Average';
      return 'Below Average';
    } else {
      // For most metrics, higher is better
      if (value >= benchmarks.excellent) return 'Excellent';
      if (value >= benchmarks.good) return 'Good';
      if (value >= benchmarks.average) return 'Average';
      return 'Below Average';
    }
  };

  // Update the generateRecommendations function to store recommendations
  const generateRecommendations = (category: MetricCategory) => {
    const categoryMetrics = METRICS.filter(metric => metric.category === category);
    const recommendations: string[] = [];

    categoryMetrics.forEach(metric => {
      const value = metricValues[metric.id];
      if (!value && value !== 0) return;

      const benchmarks = getFacilitySpecificBenchmarks(metric, facilityType);

      if (metric.id === 'denial_rate' || metric.id === 'staff_turnover' || metric.id === 'readmission_rate') {
        // For these metrics, lower is better
        if (value > benchmarks.average) {
          switch (metric.id) {
            case 'denial_rate':
              recommendations.push("Implement a pre-authorization process and conduct regular claim audits to reduce denial rates.");
              break;
            case 'staff_turnover':
              recommendations.push("Review compensation structure, implement employee recognition programs, and improve work conditions to reduce turnover.");
              break;
            case 'readmission_rate':
              recommendations.push("Enhance discharge planning and follow-up care protocols to reduce readmission rates.");
              break;
          }
        }
      } else {
        // For most metrics, higher is better
        if (value < benchmarks.average) {
          switch (metric.id) {
            case 'avg_daily_rate':
              recommendations.push("Review and renegotiate insurance contracts to improve reimbursement rates.");
              break;
            case 'occupancy_rate':
              recommendations.push("Optimize your marketing funnel and referral sources to increase census levels.");
              break;
            case 'rev_per_available_bed':
              recommendations.push("Focus on both occupancy improvement and rate optimization to maximize revenue per available bed.");
              break;
            case 'gross_margin':
              recommendations.push("Analyze operational costs and implement efficiency measures to improve gross margins.");
              break;
            case 'avg_los':
              recommendations.push("Develop clinical protocols that support appropriate length of stay based on medical necessity.");
              break;
            case 'staff_to_patient_ratio':
              recommendations.push("Review staffing models to ensure appropriate clinical coverage while maintaining financial efficiency.");
              break;
            case 'admission_conversion':
              recommendations.push("Implement a structured admissions process and train admissions staff on effective conversion techniques.");
              break;
            case 'utilization_review_success':
              recommendations.push("Enhance documentation practices and train staff on effective utilization review strategies.");
              break;
            case 'completion_rate':
              recommendations.push("Develop retention strategies and early intervention protocols for patients at risk of leaving treatment.");
              break;
            case 'assessment_completion':
              recommendations.push("Implement assessment workflows and accountability measures to ensure completion.");
              break;
            case 'treatment_plan_adherence':
              recommendations.push("Establish regular treatment plan review processes and track adherence metrics.");
              break;
            case 'patient_satisfaction':
            case 'family_satisfaction':
            case 'nps':
              recommendations.push("Implement regular satisfaction surveys and create action plans based on feedback.");
              break;
          }
        }
      }
    });

    const finalRecommendations = recommendations.length > 0
      ? recommendations
      : [
          `Your performance in this category meets or exceeds industry standards for ${
            facilityType === ''
              ? 'behavioral health facilities'
              : facilityType
                  .replace('-', '/')
                  .replace('residential', 'residential treatment centers')
          }. Continue to monitor and maintain these metrics.`
        ];

    // Store recommendations for PDF export
    setCategoryRecommendations(prev => ({
      ...prev,
      [category]: finalRecommendations
    }));

    return finalRecommendations;
  };

  // Calculate overall score for a category
  const calculateCategoryScore = (category: MetricCategory) => {
    const categoryMetrics = METRICS.filter(metric => metric.category === category);
    let totalPoints = 0;
    let maxPoints = categoryMetrics.length * 4; // 4 is max points per metric
    let metrics = 0;

    categoryMetrics.forEach(metric => {
      const value = metricValues[metric.id];
      if (!value && value !== 0) return;

      metrics++;
      const benchmarks = getFacilitySpecificBenchmarks(metric, facilityType);

      if (metric.id === 'denial_rate' || metric.id === 'staff_turnover' || metric.id === 'readmission_rate') {
        // For these metrics, lower is better
        if (value <= benchmarks.excellent) totalPoints += 4;
        else if (value <= benchmarks.good) totalPoints += 3;
        else if (value <= benchmarks.average) totalPoints += 2;
        else totalPoints += 1;
      } else {
        // For most metrics, higher is better
        if (value >= benchmarks.excellent) totalPoints += 4;
        else if (value >= benchmarks.good) totalPoints += 3;
        else if (value >= benchmarks.average) totalPoints += 2;
        else totalPoints += 1;
      }
    });

    maxPoints = metrics * 4;
    return maxPoints > 0 ? (totalPoints / maxPoints) * 100 : 0;
  };

  // Toggle section expansion
  const toggleSection = (section: string) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  };

  // Modify the handleSubmit function to calculate all category scores on submit
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    // Calculate scores for all categories for PDF export
    const financial = calculateCategoryScore('financial');
    const operational = calculateCategoryScore('operational');
    const clinical = calculateCategoryScore('clinical');
    const satisfaction = calculateCategoryScore('satisfaction');

    // Generate recommendations for all categories
    generateRecommendations('financial');
    generateRecommendations('operational');
    generateRecommendations('clinical');
    generateRecommendations('satisfaction');

    setShowResults(true);
  };

  // Reset the form
  const handleReset = () => {
    setMetricValues({});
    setShowResults(false);
    setCategoryRecommendations({
      financial: [],
      operational: [],
      clinical: [],
      satisfaction: []
    });
  };

  return (
    <div className="container max-w-7xl py-12 md:py-16">
      {/* Breadcrumbs */}
      <div className="flex items-center gap-1 text-sm text-muted-foreground mb-8">
        <Link href="/" className="hover:text-foreground">Home</Link>
        <ChevronRight className="h-4 w-4" />
        <Link href="/resources" className="hover:text-foreground">Resources</Link>
        <ChevronRight className="h-4 w-4" />
        <span>Benchmarking Tool</span>
      </div>

      {/* Page Header */}
      <div className="mx-auto mb-12 max-w-4xl text-center">
        <Badge className="w-fit mb-4 text-sm mx-auto inline-flex items-center bg-primary/10 hover:bg-primary/20 text-primary border-none px-3 py-1">
          <BarChart2 className="h-3.5 w-3.5 mr-1.5" />
          <span>Interactive Tool</span>
        </Badge>
        <h1 className="text-3xl sm:text-4xl lg:text-5xl font-bold mb-4 font-heading">
          Behavioral Health Industry <span className="text-gradient bg-gradient-to-r from-primary via-accent to-primary bg-clip-text text-transparent">Benchmarking Tool</span>
        </h1>
        <p className="text-xl text-muted-foreground">
          Compare your facility's performance against industry standards and get personalized recommendations for improvement.
        </p>
      </div>

      {/* How it works section */}
      <Card className="mb-8">
        <CardHeader>
          <CardTitle>How this tool works</CardTitle>
          <CardDescription>
            Enter your facility's metrics to see how you compare against industry benchmarks and receive tailored recommendations.
          </CardDescription>
        </CardHeader>
        <CardContent className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="flex flex-col items-center text-center p-4">
            <div className="bg-primary/10 rounded-full w-12 h-12 flex items-center justify-center mb-4">
              <span className="text-primary font-bold">1</span>
            </div>
            <h3 className="font-medium mb-2">Enter your metrics</h3>
            <p className="text-sm text-muted-foreground">
              Input your facility's current performance metrics across financial, operational, clinical, and satisfaction categories.
            </p>
          </div>
          <div className="flex flex-col items-center text-center p-4">
            <div className="bg-primary/10 rounded-full w-12 h-12 flex items-center justify-center mb-4">
              <span className="text-primary font-bold">2</span>
            </div>
            <h3 className="font-medium mb-2">Compare performance</h3>
            <p className="text-sm text-muted-foreground">
              See how your facility compares to industry benchmarks with visual indicators and performance ratings.
            </p>
          </div>
          <div className="flex flex-col items-center text-center p-4">
            <div className="bg-primary/10 rounded-full w-12 h-12 flex items-center justify-center mb-4">
              <span className="text-primary font-bold">3</span>
            </div>
            <h3 className="font-medium mb-2">Get recommendations</h3>
            <p className="text-sm text-muted-foreground">
              Receive tailored recommendations and best practices to improve your performance in key areas.
            </p>
          </div>
        </CardContent>
      </Card>

      {/* Facility Type Selection and Tabs */}
      <Card className="mb-8">
        <CardHeader>
          <CardTitle>Facility Information</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="mb-6">
            <Label htmlFor="facility-type" className="mb-2 block">Facility Type</Label>
            <Select onValueChange={setFacilityType} value={facilityType}>
              <SelectTrigger id="facility-type" className="w-full max-w-md">
                <SelectValue placeholder="Select your facility type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="residential">Residential Treatment Center</SelectItem>
                <SelectItem value="detox">Detox Center</SelectItem>
                <SelectItem value="php-iop">PHP/IOP Program</SelectItem>
                <SelectItem value="outpatient">Outpatient Services</SelectItem>
                <SelectItem value="specialty">Specialty Program</SelectItem>
              </SelectContent>
            </Select>
            <p className="mt-2 text-sm text-muted-foreground">
              Selecting your facility type will customize benchmarks to be more relevant to your specific services.
            </p>
          </div>
        </CardContent>
      </Card>

      {/* Metrics Input Form */}
      <form onSubmit={handleSubmit}>
        <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as MetricCategory)} className="mb-8">
          <TabsList className="grid w-full grid-cols-2 md:grid-cols-4">
            {categories.map(category => (
              <TabsTrigger key={category.id} value={category.id} className="flex items-center gap-2">
                {category.icon}
                {category.name}
              </TabsTrigger>
            ))}
          </TabsList>

          {categories.map(categoryObj => {
            const category = categoryObj.id as MetricCategory;
            return (
              <TabsContent key={category} value={category} className="pt-6">
                <Card>
                  <CardHeader>
                    <CardTitle>{categoryObj.name} Metrics</CardTitle>
                    <CardDescription>
                      Enter your current metrics to compare against industry benchmarks
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-6">
                      {METRICS.filter(metric => metric.category === category).map(metric => (
                        <div key={metric.id} className="grid gap-4 md:grid-cols-5 items-center">
                          <div className="md:col-span-2">
                            <Label className="text-base flex items-center gap-1">
                              {metric.name}
                              <HoverCard>
                                <HoverCardTrigger asChild>
                                  <Info className="h-4 w-4 text-muted-foreground cursor-help" />
                                </HoverCardTrigger>
                                <HoverCardContent className="w-80">
                                  <div className="text-sm">
                                    <p className="font-medium mb-1">{metric.name}</p>
                                    <p className="text-muted-foreground mb-2">{metric.description}</p>
                                    <div className="grid grid-cols-2 gap-x-2 gap-y-1">
                                      <p className="text-red-500">Below Avg: {formatValue(getFacilitySpecificBenchmarks(metric, facilityType).poor, metric.valueType)}</p>
                                      <p className="text-yellow-500">Average: {formatValue(getFacilitySpecificBenchmarks(metric, facilityType).average, metric.valueType)}</p>
                                      <p className="text-blue-500">Good: {formatValue(getFacilitySpecificBenchmarks(metric, facilityType).good, metric.valueType)}</p>
                                      <p className="text-green-500">Excellent: {formatValue(getFacilitySpecificBenchmarks(metric, facilityType).excellent, metric.valueType)}</p>
                                    </div>
                                  </div>
                                </HoverCardContent>
                              </HoverCard>
                            </Label>
                            <p className="text-xs text-muted-foreground">{metric.description}</p>
                          </div>

                          <div className="md:col-span-3 flex flex-col gap-2">
                            {metric.valueType === 'percentage' && (
                              <>
                                <div className="flex justify-between items-center">
                                  <Input
                                    type="number"
                                    min={0}
                                    max={100}
                                    step={1}
                                    value={metricValues[metric.id] || ''}
                                    onChange={(e) => handleMetricChange(metric.id, Number(e.target.value))}
                                    className="w-24"
                                  />
                                  <span className="text-sm font-medium">{metric.unit}</span>
                                </div>
                                {metricValues[metric.id] !== undefined && (
                                  <Slider
                                    value={[metricValues[metric.id] || 0]}
                                    min={0}
                                    max={100}
                                    step={1}
                                    onValueChange={(vals) => handleMetricChange(metric.id, vals[0])}
                                  />
                                )}
                              </>
                            )}

                            {metric.valueType === 'currency' && (
                              <div className="flex items-center">
                                <span className="mr-2">$</span>
                                <Input
                                  type="number"
                                  min={0}
                                  step={10}
                                  value={metricValues[metric.id] || ''}
                                  onChange={(e) => handleMetricChange(metric.id, Number(e.target.value))}
                                />
                              </div>
                            )}

                            {(metric.valueType === 'number' || metric.valueType === 'days') && (
                              <div className="flex items-center">
                                <Input
                                  type="number"
                                  min={0}
                                  step={metric.valueType === 'days' ? 1 : 0.1}
                                  value={metricValues[metric.id] || ''}
                                  onChange={(e) => handleMetricChange(metric.id, Number(e.target.value))}
                                />
                                <span className="ml-2 text-sm font-medium">
                                  {metric.valueType === 'days' ? 'days' : ''}
                                </span>
                              </div>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
            );
          })}
        </Tabs>

        <div className="flex justify-center gap-4 mb-12">
          <Button type="submit" size="lg" className="w-40">
            Generate Results
          </Button>
          <Button type="button" variant="outline" size="lg" className="w-40" onClick={handleReset}>
            Reset
          </Button>
        </div>
      </form>

      {/* Results Section */}
      {showResults && (
        <div className="space-y-8">
          <h2 className="text-2xl font-bold text-center mb-8">
            Benchmark Results & Recommendations
          </h2>

          {/* Summary Cards */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
            {categories.map(categoryObj => {
              const category = categoryObj.id as MetricCategory;
              const score = calculateCategoryScore(category);

              return (
                <Card key={category} className={`${
                  score >= 80 ? 'border-green-500 bg-green-50 dark:bg-green-950/20' :
                  score >= 60 ? 'border-blue-500 bg-blue-50 dark:bg-blue-950/20' :
                  score >= 40 ? 'border-yellow-500 bg-yellow-50 dark:bg-yellow-950/20' :
                  'border-red-500 bg-red-50 dark:bg-red-950/20'
                }`}>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-lg flex justify-between items-center">
                      {categoryObj.name}
                      <Badge className={`${
                        score >= 80 ? 'bg-green-500' :
                        score >= 60 ? 'bg-blue-500' :
                        score >= 40 ? 'bg-yellow-500' :
                        'bg-red-500'
                      }`}>
                        {score.toFixed(0)}%
                      </Badge>
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-sm">
                      {score >= 80 ? 'Excellent. Consistently exceeding industry benchmarks.' :
                       score >= 60 ? 'Good. Meeting or exceeding most benchmarks.' :
                       score >= 40 ? 'Average. Meeting some benchmarks but room for improvement.' :
                       'Below Average. Key areas need significant improvement.'}
                    </p>
                  </CardContent>
                </Card>
              );
            })}
          </div>

          {/* Detailed Results */}
          <div className="space-y-6">
            {categories.map(categoryObj => {
              const category = categoryObj.id as MetricCategory;
              const categoryMetrics = METRICS.filter(metric => metric.category === category);

              return (
                <Card key={category} className="overflow-hidden">
                  <CardHeader className="bg-muted/50 cursor-pointer" onClick={() => toggleSection(category)}>
                    <CardTitle className="flex justify-between items-center">
                      <span>{categoryObj.name} Metrics</span>
                      <Button variant="ghost" size="sm">
                        {expandedSections[category] ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
                      </Button>
                    </CardTitle>
                  </CardHeader>

                  {expandedSections[category] && (
                    <>
                      <Separator />
                      <CardContent className="pt-6">
                        {/* Metrics Table */}
                        <div className="overflow-x-auto">
                          <table className="w-full text-sm">
                            <thead>
                              <tr className="border-b">
                                <th className="pb-2 text-left">Metric</th>
                                <th className="pb-2 text-right">Your Value</th>
                                <th className="pb-2 text-right">Rating</th>
                                <th className="pb-2 text-right">Industry Benchmark</th>
                              </tr>
                            </thead>
                            <tbody>
                              {categoryMetrics.map(metric => {
                                const value = metricValues[metric.id];
                                const rating = getRatingLabel(metric, value);
                                const ratingClass = getRatingClass(metric, value);

                                return (
                                  <tr key={metric.id} className="border-b last:border-b-0">
                                    <td className="py-4">{metric.name}</td>
                                    <td className="py-4 text-right font-medium">
                                      {value !== undefined ? formatValue(value, metric.valueType) : 'N/A'}
                                    </td>
                                    <td className={`py-4 text-right font-medium ${ratingClass}`}>
                                      {value !== undefined ? rating : 'N/A'}
                                    </td>
                                    <td className="py-4 text-right">
                                      {formatValue(getFacilitySpecificBenchmarks(metric, facilityType).good, metric.valueType)}
                                      <span className="text-xs text-muted-foreground ml-1">(Good)</span>
                                    </td>
                                  </tr>
                                );
                              })}
                            </tbody>
                          </table>
                        </div>

                        {/* Recommendations */}
                        <div className="mt-8 pt-6 border-t">
                          <h3 className="text-lg font-semibold mb-4">Recommendations</h3>
                          <ul className="space-y-3">
                            {generateRecommendations(category).map((recommendation, index) => (
                              <li key={index} className="flex gap-2">
                                <span className="flex-shrink-0 mt-1">
                                  {recommendation.includes("meets or exceeds") ? (
                                    <CheckCircle className="h-5 w-5 text-green-500" />
                                  ) : (
                                    <AlertCircle className="h-5 w-5 text-blue-500" />
                                  )}
                                </span>
                                <span>{recommendation}</span>
                              </li>
                            ))}
                          </ul>
                        </div>
                      </CardContent>
                    </>
                  )}
                </Card>
              );
            })}
          </div>

          {/* Action Buttons */}
          <div className="flex flex-col md:flex-row justify-center gap-4 pt-6">
            <BenchmarkingPdfExport
              facilityType={facilityType}
              metricValues={metricValues}
              scores={{
                financial: calculateCategoryScore('financial'),
                operational: calculateCategoryScore('operational'),
                clinical: calculateCategoryScore('clinical'),
                satisfaction: calculateCategoryScore('satisfaction')
              }}
              recommendations={{
                financial: generateRecommendations('financial'),
                operational: generateRecommendations('operational'),
                clinical: generateRecommendations('clinical'),
                satisfaction: generateRecommendations('satisfaction')
              }}
            />
            <Button asChild className="gap-2">
              <Link href="/contact">
                Schedule Consultation
                <ArrowRight className="h-4 w-4" />
              </Link>
            </Button>
          </div>
        </div>
      )}

      {/* About the Benchmarks */}
      <Card className="mt-16">
        <CardHeader>
          <CardTitle>About Our Benchmarking Data</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="mb-4">
            The benchmarks in this tool are derived from multiple industry sources including:
          </p>
          <ul className="space-y-2 mb-6">
            <li className="flex items-start gap-2">
              <CheckCircle className="h-5 w-5 text-primary mt-0.5 flex-shrink-0" />
              <span>Anonymized data from over 150 behavioral health facilities</span>
            </li>
            <li className="flex items-start gap-2">
              <CheckCircle className="h-5 w-5 text-primary mt-0.5 flex-shrink-0" />
              <span>Industry reports and published studies on behavioral health facility performance</span>
            </li>
            <li className="flex items-start gap-2">
              <CheckCircle className="h-5 w-5 text-primary mt-0.5 flex-shrink-0" />
              <span>Expert insights from our consulting practice</span>
            </li>
            <li className="flex items-start gap-2">
              <CheckCircle className="h-5 w-5 text-primary mt-0.5 flex-shrink-0" />
              <span>Accreditation standards and best practices</span>
            </li>
          </ul>
          <p className="text-sm text-muted-foreground">
            <strong>Note:</strong> When you select a facility type, benchmarks are automatically adjusted to reflect standards specific to that treatment setting. These benchmarks represent industry averages and may vary based on facility size, location, and other factors. For a more personalized analysis, consider scheduling a consultation with our team.
          </p>
        </CardContent>
        <CardFooter className="flex justify-end">
          <Button asChild variant="ghost" size="sm">
            <Link href="/contact">
              Contact us for customized benchmarking
            </Link>
          </Button>
        </CardFooter>
      </Card>
    </div>
  );
}
